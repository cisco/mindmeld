# coding: utf-8

from __future__ import absolute_import

from .base_model_ import Model
from .. import util


class Directive(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, type: str = None, payload: object = None):
        """Directive - a model defined in Swagger

        :param name: The name of this Directive.
        :type name: str
        :param type: The type of this Directive.
        :type type: str
        :param payload: The payload of this Directive.
        :type payload: object
        """
        self.swagger_types = {"name": str, "type": str, "payload": object}

        self.attribute_map = {"name": "name", "type": "type", "payload": "payload"}
        self._name = name
        self._type = type
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt) -> "Directive":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Directive of this Directive.
        :rtype: Directive
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Directive.

        Directive Name

        :return: The name of this Directive.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Directive.

        Directive Name

        :param name: The name of this Directive.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Directive.

        Directive Type

        :return: The type of this Directive.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Directive.

        Directive Type

        :param type: The type of this Directive.
        :type type: str
        """
        allowed_values = ["view", "action"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def payload(self) -> object:
        """Gets the payload of this Directive.

        JSON payload

        :return: The payload of this Directive.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload: object):
        """Sets the payload of this Directive.

        JSON payload

        :param payload: The payload of this Directive.
        :type payload: object
        """

        self._payload = payload

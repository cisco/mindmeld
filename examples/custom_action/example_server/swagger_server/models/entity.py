# coding: utf-8

from __future__ import absolute_import

from .base_model_ import Model
from .. import util


class Entity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        text: str = None,
        type: str = None,
        role: str = None,
        value: object = None,
        display_text: str = None,
        confidence: float = None,
        is_system_entity: bool = None,
    ):
        """Entity - a model defined in Swagger

        :param text: The text of this Entity.
        :type text: str
        :param type: The type of this Entity.
        :type type: str
        :param role: The role of this Entity.
        :type role: str
        :param value: The value of this Entity.
        :type value: object
        :param display_text: The display_text of this Entity.
        :type display_text: str
        :param confidence: The confidence of this Entity.
        :type confidence: float
        :param is_system_entity: The is_system_entity of this Entity.
        :type is_system_entity: bool
        """
        self.swagger_types = {
            "text": str,
            "type": str,
            "role": str,
            "value": object,
            "display_text": str,
            "confidence": float,
            "is_system_entity": bool,
        }

        self.attribute_map = {
            "text": "text",
            "type": "type",
            "role": "role",
            "value": "value",
            "display_text": "display_text",
            "confidence": "confidence",
            "is_system_entity": "is_system_entity",
        }
        self._text = text
        self._type = type
        self._role = role
        self._value = value
        self._display_text = display_text
        self._confidence = confidence
        self._is_system_entity = is_system_entity

    @classmethod
    def from_dict(cls, dikt) -> "Entity":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entity of this Entity.
        :rtype: Entity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this Entity.

        The text contents that span the entity

        :return: The text of this Entity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Entity.

        The text contents that span the entity

        :param text: The text of this Entity.
        :type text: str
        """

        self._text = text

    @property
    def type(self) -> str:
        """Gets the type of this Entity.

        Entity type

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Entity.

        Entity type

        :param type: The type of this Entity.
        :type type: str
        """

        self._type = type

    @property
    def role(self) -> str:
        """Gets the role of this Entity.

        Role type

        :return: The role of this Entity.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Entity.

        Role type

        :param role: The role of this Entity.
        :type role: str
        """

        self._role = role

    @property
    def value(self) -> object:
        """Gets the value of this Entity.

        The resolved value of the entity

        :return: The value of this Entity.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """Sets the value of this Entity.

        The resolved value of the entity

        :param value: The value of this Entity.
        :type value: object
        """

        self._value = value

    @property
    def display_text(self) -> str:
        """Gets the display_text of this Entity.

        A human readable text representation of the entity for use in natural language responses.

        :return: The display_text of this Entity.
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text: str):
        """Sets the display_text of this Entity.

        A human readable text representation of the entity for use in natural language responses.

        :param display_text: The display_text of this Entity.
        :type display_text: str
        """

        self._display_text = display_text

    @property
    def confidence(self) -> float:
        """Gets the confidence of this Entity.

        A confidence value from 0 to 1 about how confident the entity recognizer was for the given class label.

        :return: The confidence of this Entity.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this Entity.

        A confidence value from 0 to 1 about how confident the entity recognizer was for the given class label.

        :param confidence: The confidence of this Entity.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def is_system_entity(self) -> bool:
        """Gets the is_system_entity of this Entity.

        True if the entity is a system entity

        :return: The is_system_entity of this Entity.
        :rtype: bool
        """
        return self._is_system_entity

    @is_system_entity.setter
    def is_system_entity(self, is_system_entity: bool):
        """Sets the is_system_entity of this Entity.

        True if the entity is a system entity

        :param is_system_entity: The is_system_entity of this Entity.
        :type is_system_entity: bool
        """

        self._is_system_entity = is_system_entity

version: 2

# Workflows

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-py3.7:
          filters:
            branches:
              ignore:
                - /.*docs.*/
      - test-py3.6:
          filters:
            branches:
              ignore:
                - /.*docs.*/
      - test-py3.5:
          filters:
            branches:
              ignore:
                - /.*docs.*/
      - make-docs:
          filters:
            branches:
              only:
                - develop
                - /.*docs.*/
      - deploy-docs:
          requires:
            - make-docs
          filters:
            branches:
              only:
                - docs/staging
                - docs/master
      - deploy-blueprint:
          requires:
            - test-py3.7
            - test-py3.6
            - test-py3.5
          filters:
            branches:
              only:
                - develop
                - staging
                - master

# Definitions (keep config D.R.Y.)

definitions:

  images:

    duckling-image: &duckling-image
      image: mindmeldworkbench/duckling:master
      command: stack exec -- duckling-example-exe --port 7151

    es-image: &es-image
        image: docker.elastic.co/elasticsearch/elasticsearch:5.6.10
        environment:
          - discovery.type=single-node
          - http.host=0.0.0.0
          - transport.host=127.0.0.1
          - xpack.security.enabled=false
          - ES_JAVA_OPTS=-Xms768m -Xmx768m
        command: /bin/bash -c "bin/elasticsearch-plugin install analysis-phonetic && bin/es-docker"

  steps:

    # Steps

    py-deps: &py-deps
      run:
          name: Activate virtualenv and install requirements
          command: |

            # create and activate venv
            python -m venv ~/venv
            echo ". ~/venv/bin/activate" >> $BASH_ENV
            source $BASH_ENV

            # upgrade pip to latest
            pip install -U pip

            # install mindmeld and test requirements
            pip install -r test-requirements.txt
            pip install -e .

    # Make docs
    docs-steps: &docs-steps

      - checkout
      - restore_cache:
          key: v1-docs-cache--{{ checksum "docs-requirements.txt" }}-{{ checksum "setup.py" }}

      - run:
          name: Activate virtualenv and install requirements
          command: |

            # create and activate venv
            python -m venv ~/venv
            echo ". ~/venv/bin/activate" >> $BASH_ENV
            source $BASH_ENV

            # upgrade pip to latest
            pip install -U pip
            pip install awscli

            # install mindmeld and requirements
            mkdir ~/packages -p
            RTD_WHEEL="sphinx_rtd_theme-0.1.10mm9.tar.gz"
            if [ -f "~/packages/$RTD_WHEEL" ]; then
              echo "Using cached docs theme wheel"
            else
              echo "Downloading docs theme wheel"
              aws s3 cp s3://mindmeld-pypi/develop/$RTD_WHEEL ~/packages
            fi
            pip install ~/packages/$RTD_WHEEL
            pip install -e .
            pip install -r docs-requirements.txt

      - save_cache:
          name: Save python deps cache
          key: v1-docs-cache--{{ checksum "docs-requirements.txt" }}-{{ checksum "setup.py" }}
          paths:
            - ~/venv
            - ~/packages

      - run:
          name: Run linters and static analysis
          command: |
           ./lintme

      - run:
          name: Make the docs
          command: |
            MM_BRANCH=$CIRCLE_BRANCH make apidoc

      - store_artifacts:
          path: ./build/html

      - persist_to_workspace:
          root: build
          paths: html

    # Step Sequences

    test-steps: &test-steps

      - checkout

      - restore_cache:
          key: v1-py-cache-{{ .Environment.PYTHON_VERSION }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}

      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      -  *py-deps

      - save_cache:
          name: Save python deps cache
          key: v1-py-cache-{{ .Environment.PYTHON_VERSION }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}
          paths:
            - ~/venv

      - run:
          name: Run linters and static analysis
          command: |
           ./lintme

      - run:
          name: Wait for elasticsearch & numerical parser
          when: always
          command: |
            dockerize -wait tcp://localhost:9200 -timeout 1m
            dockerize -wait tcp://localhost:7151 -timeout 1m

      - run:
          name: Run python tests
          # run this even when linting fails
          when: always
          command: |
            # run tests
            mkdir ~/test-reports
            pytest --junitxml=~/test-reports/junit.xml --cov-report html:/home/circleci/test-reports/cov_html --cov=mindmeld

      - run:
          name: Food ordering blueprint kb setup
          # run this even when linting fails
          when: always
          command: python -c "from mindmeld._util import Blueprint; Blueprint.setup_kb(name='food_ordering', app_path='./food_ordering')"

      - store_test_results:
          path: /home/circleci/test-reports

      - store_artifacts:
          path: /home/circleci/test-reports


# Jobs

jobs:
  test-py3.7:
    docker:
      - image: circleci/python:3.7.0
        environment:
          PYTHON_VERSION: "3.7.0"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      - *es-image
      - *duckling-image
    steps: *test-steps

  test-py3.6:
    docker:
      - image: circleci/python:3.6.6
        environment:
          PYTHON_VERSION: "3.6.6"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      - *es-image
      - *duckling-image
    steps: *test-steps

  test-py3.5:
    docker:
      - image: circleci/python:3.5.5
        environment:
          PYTHON_VERSION: "3.5.5"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
      - *es-image
      - *duckling-image
    steps: *test-steps

  make-docs:
    docker:
      - image: circleci/python:3.6.6
        environment:
          PYTHON_VERSION: "3.6.6"
          _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
    steps: *docs-steps

  deploy-blueprint:
    docker:
      - image: circleci/python:3.6.6
        environment:
          PYTHON_VERSION: "3.6.6"
    steps:
      - checkout

      - restore_cache:
          key: v1-bp-cache-{{ .Environment.PYTHON_VERSION }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}

      - *py-deps

      - run:
          name: Install AWS cli
          command: |
            echo ". ~/venv/bin/activate" >> $BASH_ENV
            source $BASH_ENV
            pip install awscli

      - save_cache:
          name: Save python deps cache
          key: v1-bp-cache-{{ .Environment.PYTHON_VERSION }}-{{ checksum "test-requirements.txt" }}-{{ checksum "setup.py" }}
          paths:
            - ~/venv

      - deploy:
          command: |
            MM_BRANCH=staging bash scripts/upload_blueprint.sh -d `pwd`/tests/kwik_e_mart -b kwik_e_mart
            MM_BRANCH=master bash scripts/upload_blueprint.sh -d `pwd`/tests/kwik_e_mart -b kwik_e_mart

  deploy-docs:
    docker:
      - image: circleci/python:3.6.6
    steps:
      - checkout
      - attach_workspace:
          at: build
      - restore_cache:
          key: v1-docs-cache--{{ checksum "docs-requirements.txt" }}-{{ checksum "setup.py" }}
      - run:
          command: |
            # create and activate venv
            python -m venv ~/venv
            echo ". ~/venv/bin/activate" >> $BASH_ENV
            source $BASH_ENV
            scripts/upload_to_s3.sh
